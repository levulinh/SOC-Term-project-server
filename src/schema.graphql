scalar DateTime

enum UserOrderByInput {
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

enum ThoughtOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

enum Gender {
  MALE
  FEMALE
}

type Subscription {
  newThought: Thought
  newComment(thoughtId: ID!): Comment
  newUserThought(username: String!): Thought
}

type Query {
  info: String!
  users(
    filter: String
    first: Int
    skip: Int
    orderBy: UserOrderByInput
  ): UserSearchEntry
  user(userId: ID, email: String): User!
  userEntry(userId: ID, email: String, username: String): UserEntry!
  getFeed(orderBy: ThoughtOrderByInput): FeedEntry
  thought(thoughtId: ID!): Thought!
  thoughts(username: String!): FeedEntry
}

type FeedEntry {
  count: Int
  thoughts: [Thought]
}

type UserEntry {
  id: ID!
  name: String!
  email: String!
  username: String!
  moto: String
  gender: Gender
  followings: FollowEntry
  followers: FollowEntry
  thoughts: [Thought]
  loves: [Love]
  comments: [Comment!]!
}

type FollowEntry {
  count: Int
  users: [User]
}

type UserSearchEntry {
  users: [User!]!
  count: Int!
}

type Mutation {
  signup(
    email: String!
    password: String!
    name: String!
    username: String!
    gender: Gender
    moto: String
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  follow(followId: ID): UserEntry
  unFollow(followId: ID): UserEntry
  post(content: String!): Thought
  love(thoughtId: ID!): Love
  unlove(thoughtId: ID!): Thought
  comment(thoughtId: ID!, content: String!): Thought
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  username: String!
  moto: String
  gender: Gender
  followings: [User]
  followers: [User]
  thoughts: [Thought]
  loves: [Love]
  comments: [Comment!]!
}

type Thought {
  id: ID!
  news: String
  content: String!
  postedBy: User!
  createdAt: DateTime!
  loves: [Love]
  comments: [Comment!]!
}

type Comment {
  id: ID!
  content: String!
  thought: Thought!
  postedBy: User!
  createdAt: DateTime!
}

type Love {
  id: ID!
  thought: Thought!
  user: User!
}
